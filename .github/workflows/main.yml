name: Deploy Laravel to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: restaurant_test
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, zip, gd
        coverage: none

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 755 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        APP_ENV: testing
        MAIL_MAILER: array
      run: |
        php artisan config:clear
        php artisan route:clear
        php artisan view:clear
        php artisan test --verbose

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd /var/www/restaurant
          
          # Pull latest changes
          git pull origin main
          
          # Create .env from secrets if not exists
          if [ ! -f .env ]; then
            cp .env.example .env
            sed -i "s|APP_KEY=|APP_KEY=${{ secrets.APP_KEY }}|g" .env
            sed -i "s|DB_HOST=127.0.0.1|DB_HOST=db|g" .env
            sed -i "s|REDIS_HOST=127.0.0.1|REDIS_HOST=redis|g" .env
          fi
          
          # Stop existing containers
          docker-compose down
          
          # Rebuild and start containers
          docker-compose up -d --build
          
          # Wait for database to be ready
          sleep 30
          
          # Run Laravel commands
          docker-compose exec -T app php artisan config:cache
          docker-compose exec -T app php artisan route:cache
          docker-compose exec -T app php artisan view:cache
          docker-compose exec -T app php artisan migrate --force
          
          # Restart services
          docker-compose restart
          
          echo "Deployment completed successfully!"
